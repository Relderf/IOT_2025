[
    {
        "id": "de00eae9dfa0e3da",
        "type": "tab",
        "label": "Trabajo Final CO2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9228fce8f2bf299a",
        "type": "mqtt-broker",
        "name": "Broker MQTT (Mosquitto)",
        "broker": "mqtt",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ec4f1a47221a48c3",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "iot2025_tp_final",
        "name": "DB Local (InfluxDB)",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "0200124cafdec0b4",
        "type": "mqtt in",
        "z": "de00eae9dfa0e3da",
        "name": "Recibir CO2",
        "topic": "camara/01/co2",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9228fce8f2bf299a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 360,
        "wires": [
            [
                "cdfc30c8eea567a8",
                "a7226b89138448ab",
                "be0d600b4586be0c"
            ]
        ]
    },
    {
        "id": "680c18e9377d84fc",
        "type": "mqtt out",
        "z": "de00eae9dfa0e3da",
        "name": "Publicar Comando de Ventilación",
        "topic": "camara/01/ventilacion",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9228fce8f2bf299a",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "be0d600b4586be0c",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Ventilar CO2",
        "func": "const CO2_BAJO = 200;\nconst CO2_ALTO = 800;\n\nconst co2 = parseFloat(msg.payload.co2);\nconst ventilacionEncendida = flow.get(\"ventilacionEncendida\") || false;\n\nif (co2 >= CO2_ALTO && !ventilacionEncendida) {\n    msg.payload = \"prender\";\n    flow.set(\"ventilacionEncendida\", true);\n    return msg;\n}\n\nif (co2 <= CO2_BAJO && ventilacionEncendida) {\n    msg.payload = \"apagar\";\n    flow.set(\"ventilacionEncendida\", false);\n    return msg;\n}\n\nreturn null; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "680c18e9377d84fc"
            ]
        ]
    },
    {
        "id": "aa2c1877510d880b",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Setup inicial",
        "props": [
            {
                "p": "payload.q",
                "v": "CREATE DATABASE iot2025_tp_final",
                "vt": "str"
            },
            {
                "p": "payload.u",
                "v": "TrabergTau",
                "vt": "str"
            },
            {
                "p": "payload.p",
                "v": "TauTraberg",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "cd3db968116eda56"
            ]
        ]
    },
    {
        "id": "cd3db968116eda56",
        "type": "http request",
        "z": "de00eae9dfa0e3da",
        "name": "Crear BD Local",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://influxdb:8086/query",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/x-www-form-urlencoded"
            }
        ],
        "x": 300,
        "y": 40,
        "wires": [
            [
                "19dbd4ab5c80d523"
            ]
        ],
        "icon": "node-red/db.svg",
        "info": "Crea la BD \"iot2025_tp_final\" en InfluxDB."
    },
    {
        "id": "e48591f2fd7b26bd",
        "type": "mqtt out",
        "z": "de00eae9dfa0e3da",
        "name": "Publicar KG o M3",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9228fce8f2bf299a",
        "x": 870,
        "y": 240,
        "wires": []
    },
    {
        "id": "3309e4c5875cc7ad",
        "type": "mqtt in",
        "z": "de00eae9dfa0e3da",
        "name": "Recibir Estado Ventilación",
        "topic": "camara/01/estado_ventilacion",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9228fce8f2bf299a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "0eb057c1a0bc4baf",
                "dc80e5d852c81c98"
            ]
        ]
    },
    {
        "id": "0eb057c1a0bc4baf",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Guardar Estado en Contexto",
        "func": "const ventilacionEncendida = msg.payload.ventilacion || false;\nflow.set(\"ventilacionEncendida\", ventilacionEncendida);\nmsg.payload = `Ventilación ${ventilacionEncendida && \"ON\" || \"OFF\"}.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "10dc714d545dc6c3"
            ]
        ]
    },
    {
        "id": "a7226b89138448ab",
        "type": "influxdb out",
        "z": "de00eae9dfa0e3da",
        "influxdb": "ec4f1a47221a48c3",
        "name": "Persistir CO2",
        "measurement": "co2",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 370,
        "y": 320,
        "wires": []
    },
    {
        "id": "19dbd4ab5c80d523",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Resultado Creación BD",
        "func": "if (msg.statusCode === 200) {\n    msg.payload = \"BD creada con éxito.\";\n} else {\n    msg.payload = `Error al crear BD: código ${msg.statusCode}.`;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 40,
        "wires": [
            [
                "3b3da82fdb207329"
            ]
        ]
    },
    {
        "id": "a50a629da48ed0bf",
        "type": "link in",
        "z": "de00eae9dfa0e3da",
        "name": "link in 1",
        "links": [
            "3b3da82fdb207329",
            "10dc714d545dc6c3",
            "dc80e5d852c81c98",
            "cdfc30c8eea567a8",
            "ce82a17cde9f3c8d",
            "ac33f71bc52177bc"
        ],
        "x": 825,
        "y": 40,
        "wires": [
            [
                "a82b876d5818d173"
            ]
        ]
    },
    {
        "id": "a82b876d5818d173",
        "type": "debug",
        "z": "de00eae9dfa0e3da",
        "name": "Debug Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 40,
        "wires": []
    },
    {
        "id": "3b3da82fdb207329",
        "type": "link out",
        "z": "de00eae9dfa0e3da",
        "name": "Debug",
        "mode": "link",
        "links": [
            "a50a629da48ed0bf"
        ],
        "x": 675,
        "y": 40,
        "wires": []
    },
    {
        "id": "10dc714d545dc6c3",
        "type": "link out",
        "z": "de00eae9dfa0e3da",
        "name": "Debug",
        "mode": "link",
        "links": [
            "a50a629da48ed0bf"
        ],
        "x": 575,
        "y": 140,
        "wires": []
    },
    {
        "id": "dc80e5d852c81c98",
        "type": "link out",
        "z": "de00eae9dfa0e3da",
        "name": "Debug",
        "mode": "link",
        "links": [
            "a50a629da48ed0bf"
        ],
        "x": 295,
        "y": 100,
        "wires": []
    },
    {
        "id": "2b6b2d1fa7c17a31",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Prender Ventilación",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.ventilacion",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "camara/01/estado_ventilacion",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "0eb057c1a0bc4baf",
                "776a538f493fe84f"
            ]
        ]
    },
    {
        "id": "427bb80304085fce",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Apagar Ventilación",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.ventilacion",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "camara/01/estado_ventilacion",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "0eb057c1a0bc4baf",
                "776a538f493fe84f"
            ]
        ]
    },
    {
        "id": "c891f045a301b6a1",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Inyectar CO2",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.co2",
                "v": "34.5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "camara/01/co2",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "be0d600b4586be0c"
            ]
        ]
    },
    {
        "id": "cdfc30c8eea567a8",
        "type": "link out",
        "z": "de00eae9dfa0e3da",
        "name": "Debug",
        "mode": "link",
        "links": [
            "a50a629da48ed0bf"
        ],
        "x": 215,
        "y": 320,
        "wires": []
    },
    {
        "id": "776a538f493fe84f",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Covertir Estado en Comando",
        "func": "const ventilacionEncendida = msg.payload.ventilacion || false;\nmsg.payload = ventilacionEncendida && \"prender\" || \"apagar\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "680c18e9377d84fc"
            ]
        ]
    },
    {
        "id": "1fc26e7871dfc676",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Setear KG",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "camara/01/kilos",
        "payload": "5000",
        "payloadType": "num",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "87e762da319c5bce",
                "e48591f2fd7b26bd"
            ]
        ]
    },
    {
        "id": "62c99f6c545b0067",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Setear M3",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "camara/01/m3",
        "payload": "8",
        "payloadType": "num",
        "x": 680,
        "y": 280,
        "wires": [
            [
                "aff3d32c7216e5c6",
                "e48591f2fd7b26bd"
            ]
        ]
    },
    {
        "id": "87e762da319c5bce",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Guardar KG en Contexto",
        "func": "const kg = parseFloat(msg.payload) || 0;\nflow.set(\"kg\", kg);\nmsg.payload = `KG = ${kg}.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 180,
        "wires": [
            [
                "ce82a17cde9f3c8d"
            ]
        ]
    },
    {
        "id": "ce82a17cde9f3c8d",
        "type": "link out",
        "z": "de00eae9dfa0e3da",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "a50a629da48ed0bf"
        ],
        "x": 1015,
        "y": 180,
        "wires": []
    },
    {
        "id": "aff3d32c7216e5c6",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Guardar M3 en Contexto",
        "func": "const m3 = parseFloat(msg.payload) || 1;\nflow.set(\"m3\", m3);\nmsg.payload = `M3 = ${m3}.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "ac33f71bc52177bc"
            ]
        ]
    },
    {
        "id": "ac33f71bc52177bc",
        "type": "link out",
        "z": "de00eae9dfa0e3da",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "a50a629da48ed0bf"
        ],
        "x": 1015,
        "y": 300,
        "wires": []
    }
]