[
    {
        "id": "630ff27b3317931f",
        "type": "tab",
        "label": "Trabajo Final CO2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "mqtt-in",
        "type": "mqtt in",
        "z": "630ff27b3317931f",
        "name": "Recibir datos",
        "topic": "camara/01/CO2",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9228fce8f2bf299a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "110d6187c12cc7fb"
            ]
        ]
    },
    {
        "id": "a1cd2cc321c3cb11",
        "type": "debug",
        "z": "630ff27b3317931f",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "3b5973401896c282",
        "type": "inject",
        "z": "630ff27b3317931f",
        "name": "KG y M3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "datos.KGS_PAPAS",
                "v": "10",
                "vt": "str"
            },
            {
                "p": "datos.M3",
                "v": "8",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sensores",
        "payload": "iso",
        "payloadType": "date",
        "x": 280,
        "y": 420,
        "wires": [
            [
                "3e69fd046821caf3"
            ]
        ]
    },
    {
        "id": "110d6187c12cc7fb",
        "type": "function",
        "z": "630ff27b3317931f",
        "name": "JSON",
        "func": "msg.topic = \"camara/01/CO2\";\n\nif (typeof msg.payload === \"string\") {\n    try {\n        msg.datos.co2 = JSON.parse(msg.payload);\n    } catch (e) {\n        node.warn(\"Error al parsear JSON: \" + e.message);\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "a1cd2cc321c3cb11",
                "3e69fd046821caf3",
                "7e55999e9d99a565"
            ]
        ]
    },
    {
        "id": "4e6c69bdd8db9718",
        "type": "mqtt out",
        "z": "630ff27b3317931f",
        "name": "Enviar orden",
        "topic": "camara/01/ventilacion",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9228fce8f2bf299a",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "3e69fd046821caf3",
        "type": "function",
        "z": "630ff27b3317931f",
        "name": "Motor manager",
        "func": "let temp = msg.payload.co2;\n\nlet kgs = msg.datos.KGS_PAPAS || 10;\nlet m3 = msg.datos.M3 || 8;\nlet co2 = msg.payload.CO2 || msg.payload; // Puede venir como objeto o valor directo\n\n// Umbrales\nlet CO2_BAJO = 800 * kgs * m3;\nlet CO2_ALTO = 1400 * kgs * m3;\n\n// Lógica de control\nif (co2 >= CO2_ALTO) {\n    // Prender ventilación\n    return { payload: \"prender\" };\n} else if (co2 <= CO2_BAJO) {\n    // Apagar ventilación\n    return { payload: \"apagar\" };\n} else {\n    // No hacer nada\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 420,
        "wires": [
            [
                "a1cd2cc321c3cb11",
                "4e6c69bdd8db9718"
            ]
        ]
    },
    {
        "id": "7e55999e9d99a565",
        "type": "influxdb out",
        "z": "630ff27b3317931f",
        "influxdb": "ec4f1a47221a48c3",
        "name": "Guardar en Influx",
        "measurement": "sensores",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 530,
        "y": 180,
        "wires": []
    },
    {
        "id": "a2fd56ebf4f21933",
        "type": "inject",
        "z": "630ff27b3317931f",
        "name": "Crear DB telegraf",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "eb46d92cfe98a5e3"
            ]
        ]
    },
    {
        "id": "eb46d92cfe98a5e3",
        "type": "http request",
        "z": "630ff27b3317931f",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://TrabergTau:TauTraberg@influxdb:8086/query?q=CREATE DATABASE telegraf",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 60,
        "wires": [
            [
                "a1cd2cc321c3cb11"
            ]
        ]
    },
    {
        "id": "9228fce8f2bf299a",
        "type": "mqtt-broker",
        "name": "Broker MQTT Contenedor",
        "broker": "192.168.0.160",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ec4f1a47221a48c3",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "telegraf",
        "name": "Influx Local",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    }
]