[
    {
        "id": "de00eae9dfa0e3da",
        "type": "tab",
        "label": "Trabajo Final CO2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0200124cafdec0b4",
        "type": "mqtt in",
        "z": "de00eae9dfa0e3da",
        "name": "Recibir CO2",
        "topic": "camara/01/co2",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9228fce8f2bf299a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 310,
        "y": 300,
        "wires": [
            [
                "7847943e04c7fb71"
            ]
        ]
    },
    {
        "id": "4582cfe6af0875eb",
        "type": "debug",
        "z": "de00eae9dfa0e3da",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 300,
        "wires": []
    },
    {
        "id": "7847943e04c7fb71",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "JSON",
        "func": "msg.topic = \"camara/01/co2\";\n\nif (typeof msg.payload === \"string\") {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch (e) {\n        node.warn(\"Error al parsear JSON: \" + e.message);\n        return null;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 300,
        "wires": [
            [
                "a7226b89138448ab",
                "be0d600b4586be0c",
                "4582cfe6af0875eb"
            ]
        ]
    },
    {
        "id": "680c18e9377d84fc",
        "type": "mqtt out",
        "z": "de00eae9dfa0e3da",
        "name": "Enviar orden",
        "topic": "camara/01/ventilacion",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9228fce8f2bf299a",
        "x": 1070,
        "y": 420,
        "wires": []
    },
    {
        "id": "be0d600b4586be0c",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Ventilación",
        "func": "let co2 = msg.payload.co2;\nlet ultimoCo2 = 0\nlet datos = flow.get(\"datos\") || {\"kilos\":5000,\"m3\":8};\nlet kgs = datos.kilos || 10;\nlet m3 = datos.m3 || 8;\nlet ventilacion = flow.get(\"ventilacion\") || false;\n\n// Umbrales\nlet CO2_BAJO = 100;\nlet CO2_ALTO = 800;\n\n// Lógica\nif (co2 >= CO2_ALTO && !ventilacion) {\n    ventilacion = true;\n    msg.payload = \"prender\";\n    flow.set(\"ventilacion\", true);\n    return msg;\n} else if (co2 <= CO2_BAJO && ventilacion) {\n    ventilacion = false;\n    msg.payload = \"apagar\";\n    flow.set(\"ventilacion\", false);\n    return msg;\n}\n\nreturn null; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 360,
        "wires": [
            [
                "4582cfe6af0875eb",
                "680c18e9377d84fc"
            ]
        ]
    },
    {
        "id": "a7226b89138448ab",
        "type": "influxdb out",
        "z": "de00eae9dfa0e3da",
        "influxdb": "ec4f1a47221a48c3",
        "name": "Guardar en Influx",
        "measurement": "sensores",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 810,
        "y": 220,
        "wires": []
    },
    {
        "id": "aa2c1877510d880b",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Crear DB telegraf",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 530,
        "y": 60,
        "wires": [
            [
                "cd3db968116eda56"
            ]
        ]
    },
    {
        "id": "cd3db968116eda56",
        "type": "http request",
        "z": "de00eae9dfa0e3da",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://TrabergTau:TauTraberg@influxdb:8086/query?q=CREATE DATABASE telegraf",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 60,
        "wires": [
            [
                "4582cfe6af0875eb"
            ]
        ]
    },
    {
        "id": "e48591f2fd7b26bd",
        "type": "mqtt out",
        "z": "de00eae9dfa0e3da",
        "name": "Enviar kg y m3",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9228fce8f2bf299a",
        "x": 1060,
        "y": 520,
        "wires": []
    },
    {
        "id": "86920b014b0d8c1e",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "Definir kilos y m3",
        "props": [
            {
                "p": "datos",
                "v": "{\"kilos\":10,\"m3\":8}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 520,
        "wires": [
            [
                "6ec171155683011f",
                "d581ea3387b73ed1"
            ]
        ]
    },
    {
        "id": "6ec171155683011f",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Datos Mock",
        "func": "let kilos = Number(msg.datos.kilos);\nlet m3 = Number(msg.datos.m3);\n\nlet msgs = [];\n\nif (!isNaN(kilos) && kilos > 0) {\n    msgs.push({\n        topic: \"camara/01/kilos\",\n        payload: kilos.toString()\n    });\n}\n\nif (!isNaN(m3) && m3 > 0) {\n    msgs.push({\n        topic: \"camara/01/m3\",\n        payload: m3.toString()\n    });\n}\n\nmsg.payload = msgs;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 520,
        "wires": [
            [
                "0771edcc3b1373bb"
            ]
        ]
    },
    {
        "id": "0771edcc3b1373bb",
        "type": "split",
        "z": "de00eae9dfa0e3da",
        "name": "Split",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "4cf6f76ff623117d"
            ]
        ]
    },
    {
        "id": "13c34d8c46869e1e",
        "type": "debug",
        "z": "de00eae9dfa0e3da",
        "name": "Ver mensaje",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 620,
        "wires": []
    },
    {
        "id": "d581ea3387b73ed1",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Guardar datos",
        "func": "flow.set(\"datos\", msg.datos);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4cf6f76ff623117d",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Reasignar topic",
        "func": "msg.topic = msg.payload.topic;\nmsg.payload = msg.payload.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "e48591f2fd7b26bd",
                "13c34d8c46869e1e"
            ]
        ]
    },
    {
        "id": "33f48d298b2b8ba4",
        "type": "inject",
        "z": "de00eae9dfa0e3da",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "camara/01/ventilacion",
        "payload": "prender",
        "payloadType": "str",
        "x": 500,
        "y": 420,
        "wires": [
            [
                "680c18e9377d84fc"
            ]
        ]
    },
    {
        "id": "3309e4c5875cc7ad",
        "type": "mqtt in",
        "z": "de00eae9dfa0e3da",
        "name": "Recibir estado ventilación",
        "topic": "camara/01/estado_ventilacion",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9228fce8f2bf299a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "0eb057c1a0bc4baf",
                "4e2b8d60754125d5"
            ]
        ]
    },
    {
        "id": "0eb057c1a0bc4baf",
        "type": "function",
        "z": "de00eae9dfa0e3da",
        "name": "Guardar datos",
        "func": "flow.set(\"ventilacion\", msg.payload);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4e2b8d60754125d5",
        "type": "debug",
        "z": "de00eae9dfa0e3da",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "9228fce8f2bf299a",
        "type": "mqtt-broker",
        "name": "Broker MQTT Contenedor",
        "broker": "192.168.0.160",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ec4f1a47221a48c3",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "telegraf",
        "name": "Influx Local",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    }
]